---
/**
 * WDA-320: Formulario de solicitud para Partners B2B
 * Diseño premium con validación client-side y GraphQL preparado
 */

import type { PartnersLocale } from '../../lib/i18n/partners';

interface Props {
  locale: PartnersLocale;
  title: string;
  subtitle: string;
}

const { locale, title, subtitle } = Astro.props;
---

<section class="partners-form" id="formulario">
  <div class="partners-form__container">
    <div class="partners-form__header">
      <h2 class="partners-form__title">{title}</h2>
      <p class="partners-form__subtitle">{subtitle}</p>
    </div>

    <form
      class="partners-form__form"
      id="partnerApplicationForm"
      data-locale={locale}
      novalidate
    >
      <div class="partners-form__field">
        <label for="establishmentName" class="partners-form__label">
          <span data-i18n="establishmentName"></span>
          <span class="partners-form__required">*</span>
        </label>
        <input
          type="text"
          id="establishmentName"
          name="establishmentName"
          class="partners-form__input"
          data-i18n-placeholder="establishmentNamePlaceholder"
          required
          minlength="2"
        />
        <span class="partners-form__error" data-error="establishmentName"></span>
      </div>

      <div class="partners-form__field">
        <label for="propertyType" class="partners-form__label">
          <span data-i18n="propertyType"></span>
          <span class="partners-form__required">*</span>
        </label>
        <select
          id="propertyType"
          name="propertyType"
          class="partners-form__select"
          required
        >
          <option value="" disabled selected></option>
          <option value="hotel" data-i18n-option="propertyTypeHotel"></option>
          <option value="glamping" data-i18n-option="propertyTypeGlamping"></option>
        </select>
        <span class="partners-form__error" data-error="propertyType"></span>
      </div>

      <div class="partners-form__field">
        <label for="address" class="partners-form__label">
          <span data-i18n="address"></span>
          <span class="partners-form__required">*</span>
        </label>
        <input
          type="text"
          id="address"
          name="address"
          class="partners-form__input"
          data-i18n-placeholder="addressPlaceholder"
          required
          minlength="10"
          autocomplete="street-address"
        />
        <span class="partners-form__error" data-error="address"></span>
      </div>

      <div class="partners-form__field">
        <label for="website" class="partners-form__label">
          <span data-i18n="website"></span>
          <span class="partners-form__badge" data-i18n="websiteNote"></span>
          <span class="partners-form__required">*</span>
        </label>
        <input
          type="url"
          id="website"
          name="website"
          class="partners-form__input"
          data-i18n-placeholder="websitePlaceholder"
          required
          autocomplete="url"
        />
        <span class="partners-form__error" data-error="website"></span>
      </div>

      <div class="partners-form__row">
        <div class="partners-form__field">
          <label for="contactName" class="partners-form__label">
            <span data-i18n="contactName"></span>
            <span class="partners-form__required">*</span>
          </label>
          <input
            type="text"
            id="contactName"
            name="contactName"
            class="partners-form__input"
            data-i18n-placeholder="contactNamePlaceholder"
            required
            minlength="2"
            autocomplete="name"
          />
          <span class="partners-form__error" data-error="contactName"></span>
        </div>

        <div class="partners-form__field">
          <label for="position" class="partners-form__label">
            <span data-i18n="position"></span>
            <span class="partners-form__required">*</span>
          </label>
          <input
            type="text"
            id="position"
            name="position"
            class="partners-form__input"
            data-i18n-placeholder="positionPlaceholder"
            required
            minlength="2"
            autocomplete="organization-title"
          />
          <span class="partners-form__error" data-error="position"></span>
        </div>
      </div>

      <div class="partners-form__row">
        <div class="partners-form__field">
          <label for="phone" class="partners-form__label">
            <span data-i18n="phone"></span>
            <span class="partners-form__required">*</span>
          </label>
          <input
            type="tel"
            id="phone"
            name="phone"
            class="partners-form__input"
            data-i18n-placeholder="phonePlaceholder"
            required
            autocomplete="tel"
          />
          <span class="partners-form__error" data-error="phone"></span>
        </div>

        <div class="partners-form__field">
          <label for="email" class="partners-form__label">
            <span data-i18n="email"></span>
            <span class="partners-form__required">*</span>
          </label>
          <input
            type="email"
            id="email"
            name="email"
            class="partners-form__input"
            data-i18n-placeholder="emailPlaceholder"
            required
            autocomplete="email"
          />
          <span class="partners-form__error" data-error="email"></span>
        </div>
      </div>

      <div class="partners-form__field partners-form__field--full">
        <label for="motivation" class="partners-form__label">
          <span data-i18n="motivation"></span>
          <span class="partners-form__required">*</span>
        </label>
        <textarea
          id="motivation"
          name="motivation"
          class="partners-form__textarea"
          data-i18n-placeholder="motivationPlaceholder"
          required
          minlength="100"
          maxlength="500"
          rows="6"
        ></textarea>
        <div class="partners-form__char-counter">
          <span id="charCount">0</span>/<span>500</span>
          <span data-i18n="characterCount" class="partners-form__char-label"></span>
        </div>
        <span class="partners-form__error" data-error="motivation"></span>
      </div>

      <div class="partners-form__field partners-form__field--full">
        <label class="partners-form__checkbox-label">
          <input
            type="checkbox"
            id="gdpr"
            name="gdpr"
            class="partners-form__checkbox"
            required
          />
          <span class="partners-form__checkbox-text">
            <span data-i18n="gdpr"></span>
            <a
              href={`/${locale}/politica-privacidad`}
              class="partners-form__link"
              target="_blank"
              rel="noopener noreferrer"
              data-i18n="gdprLink"
            ></a>
            <span class="partners-form__required">*</span>
          </span>
        </label>
        <span class="partners-form__error" data-error="gdpr"></span>
      </div>

      <button
        type="submit"
        class="partners-form__submit"
        id="submitBtn"
      >
        <span data-i18n="submit" class="partners-form__submit-text"></span>
        <span class="partners-form__spinner" aria-hidden="true"></span>
      </button>
    </form>

    <div class="partners-form__message partners-form__message--success" id="successMessage">
      <div class="partners-form__message-icon">✓</div>
      <h3 class="partners-form__message-title" data-i18n="successTitle"></h3>
      <p class="partners-form__message-text" data-i18n="successMessage"></p>
    </div>

    <div class="partners-form__message partners-form__message--error" id="errorMessage">
      <div class="partners-form__message-icon">✕</div>
      <h3 class="partners-form__message-title" data-i18n="errorTitle"></h3>
      <p class="partners-form__message-text" data-i18n="errorMessage"></p>
    </div>
  </div>
</section>

<style>
  .partners-form {
    width: 100%;
    padding: 5rem 2rem;
    background: linear-gradient(
      180deg,
      #ffffff 0%,
      #f4f4f4 100%
    );
  }

  .partners-form__container {
    max-width: 900px;
    margin: 0 auto;
  }

  .partners-form__header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .partners-form__title {
    font-family: 'Helvetica Neue', 'Helvetica', Arial, sans-serif;
    font-weight: 300;
    font-size: 2.75rem;
    line-height: 1.25;
    color: #1a1a1a;
    margin: 0 0 1rem 0;
  }

  .partners-form__subtitle {
    font-family: 'Avenir Next', 'Avenir', system-ui, sans-serif;
    font-weight: 300;
    font-size: 1.25rem;
    line-height: 1.6;
    color: #636464;
    margin: 0;
  }

  .partners-form__form {
    display: flex;
    flex-direction: column;
    gap: 1.75rem;
  }

  .partners-form__row {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.75rem;
  }

  .partners-form__field {
    display: flex;
    flex-direction: column;
    gap: 0.625rem;
  }

  .partners-form__field--full {
    grid-column: 1 / -1;
  }

  .partners-form__label {
    font-family: 'Avenir Next', 'Avenir', system-ui, sans-serif;
    font-weight: 400;
    font-size: 1rem;
    color: #1a1a1a;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .partners-form__required {
    color: #DB4529;
  }

  .partners-form__badge {
    display: inline-block;
    padding: 0.25rem 0.625rem;
    font-size: 0.75rem;
    font-weight: 400;
    letter-spacing: 0.05em;
    text-transform: uppercase;
    background: #DB4529;
    color: #ffffff;
    border-radius: 4px;
  }

  .partners-form__input,
  .partners-form__select,
  .partners-form__textarea {
    font-family: 'Avenir Next', 'Avenir', system-ui, sans-serif;
    font-weight: 300;
    font-size: 1.0625rem;
    padding: 16px 20px;
    border: 2px solid #d1d1d1;
    border-radius: 8px;
    background: #ffffff;
    color: #1a1a1a;
    transition: all 0.3s ease;
  }

  .partners-form__input:focus,
  .partners-form__select:focus,
  .partners-form__textarea:focus {
    outline: none;
    border-color: #406E51;
    box-shadow: 0 0 0 4px rgba(64, 110, 81, 0.1);
  }

  .partners-form__input.partners-form__input--error,
  .partners-form__select.partners-form__select--error,
  .partners-form__textarea.partners-form__textarea--error {
    border-color: #BA2515;
  }

  .partners-form__select {
    cursor: pointer;
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M5 7.5L10 12.5L15 7.5' stroke='%231a1a1a' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 16px center;
    padding-right: 48px;
  }

  .partners-form__textarea {
    resize: vertical;
    min-height: 140px;
  }

  .partners-form__char-counter {
    font-family: 'Avenir Next', 'Avenir', system-ui, sans-serif;
    font-weight: 300;
    font-size: 0.9375rem;
    color: #636464;
    text-align: right;
  }

  .partners-form__char-label {
    margin-left: 0.25rem;
  }

  .partners-form__checkbox-label {
    display: flex;
    align-items: start;
    gap: 0.875rem;
    cursor: pointer;
  }

  .partners-form__checkbox {
    margin-top: 0.25rem;
    width: 20px;
    height: 20px;
    cursor: pointer;
    accent-color: #406E51;
  }

  .partners-form__checkbox-text {
    font-family: 'Avenir Next', 'Avenir', system-ui, sans-serif;
    font-weight: 300;
    font-size: 1rem;
    line-height: 1.6;
    color: #1a1a1a;
  }

  .partners-form__link {
    color: #406E51;
    text-decoration: underline;
    transition: opacity 0.3s ease;
  }

  .partners-form__link:hover {
    opacity: 0.8;
  }

  .partners-form__error {
    font-family: 'Avenir Next', 'Avenir', system-ui, sans-serif;
    font-weight: 300;
    font-size: 0.9375rem;
    color: #BA2515;
    display: none;
  }

  .partners-form__error--visible {
    display: block;
  }

  .partners-form__submit {
    width: 100%;
    font-family: 'Avenir Next', 'Avenir', system-ui, sans-serif;
    font-weight: 400;
    font-size: 1.0625rem;
    letter-spacing: 0.05em;
    text-transform: uppercase;
    padding: 20px 32px;
    border: none;
    border-radius: 8px;
    background: #DB4529;
    color: #ffffff;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.875rem;
    margin-top: 1.5rem;
  }

  .partners-form__submit:hover:not(:disabled) {
    background: #BA2515;
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(219, 69, 41, 0.25);
  }

  .partners-form__submit:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .partners-form__submit:focus-visible {
    outline: 3px solid #DB4529;
    outline-offset: 2px;
  }

  .partners-form__spinner {
    width: 22px;
    height: 22px;
    border: 2px solid #ffffff;
    border-top-color: transparent;
    border-radius: 50%;
    animation: spin 0.6s linear infinite;
    display: none;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .partners-form__submit--loading .partners-form__spinner {
    display: block;
  }

  .partners-form__message {
    display: none;
    flex-direction: column;
    align-items: center;
    text-align: center;
    padding: 3.5rem 2.5rem;
    border-radius: 12px;
    margin-top: 2.5rem;
  }

  .partners-form__message--visible {
    display: flex;
  }

  .partners-form__message--success {
    background: #e8f5e9;
    border: 2px solid #4caf50;
  }

  .partners-form__message--error {
    background: #ffebee;
    border: 2px solid #f44336;
  }

  .partners-form__message-icon {
    width: 72px;
    height: 72px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 3rem;
    border-radius: 50%;
    margin-bottom: 1.5rem;
  }

  .partners-form__message--success .partners-form__message-icon {
    background: #4caf50;
    color: #ffffff;
  }

  .partners-form__message--error .partners-form__message-icon {
    background: #f44336;
    color: #ffffff;
  }

  .partners-form__message-title {
    font-family: 'Avenir Next', 'Avenir', system-ui, sans-serif;
    font-weight: 400;
    font-size: 1.75rem;
    color: #1a1a1a;
    margin: 0 0 1rem 0;
  }

  .partners-form__message-text {
    font-family: 'Avenir Next', 'Avenir', system-ui, sans-serif;
    font-weight: 300;
    font-size: 1.0625rem;
    line-height: 1.6;
    color: #636464;
    margin: 0;
    max-width: 600px;
  }

  /* Desktop (>= 768px) */
  @media (min-width: 768px) {
    .partners-form__row {
      grid-template-columns: 1fr 1fr;
    }
  }

  /* Mobile (< 768px) */
  @media (max-width: 767px) {
    .partners-form {
      padding: 3rem 1.5rem;
    }

    .partners-form__title {
      font-size: 2rem;
    }

    .partners-form__subtitle {
      font-size: 1.0625rem;
    }

    .partners-form__input,
    .partners-form__select,
    .partners-form__textarea {
      font-size: 16px; /* Prevent iOS zoom on focus */
    }

    .partners-form__badge {
      font-size: 0.6875rem;
      padding: 0.1875rem 0.5rem;
    }
  }
</style>

<script>
  import { getPartnersContent } from '../../lib/i18n/partners';

  class PartnerApplicationForm {
    private form: HTMLFormElement;
    private submitBtn: HTMLButtonElement;
    private locale: string;
    private content: any;

    constructor() {
      this.form = document.getElementById('partnerApplicationForm') as HTMLFormElement;
      if (!this.form) return;

      this.submitBtn = document.getElementById('submitBtn') as HTMLButtonElement;
      this.locale = this.form.dataset.locale || 'es';
      this.content = getPartnersContent(this.locale as any);

      this.init();
    }

    private init(): void {
      this.loadI18n();
      this.attachEventListeners();
      this.setupCharacterCounter();
    }

    private loadI18n(): void {
      const labels = this.content.form.labels;

      // Load text content
      document.querySelectorAll('[data-i18n]').forEach((el) => {
        const key = el.getAttribute('data-i18n');
        if (key && labels[key as keyof typeof labels]) {
          el.textContent = labels[key as keyof typeof labels];
        }
      });

      // Load placeholders
      document.querySelectorAll('[data-i18n-placeholder]').forEach((el) => {
        const key = el.getAttribute('data-i18n-placeholder');
        if (key && labels[key as keyof typeof labels]) {
          (el as HTMLInputElement).placeholder = labels[key as keyof typeof labels];
        }
      });

      // Load select options
      document.querySelectorAll('[data-i18n-option]').forEach((el) => {
        const key = el.getAttribute('data-i18n-option');
        if (key && labels[key as keyof typeof labels]) {
          el.textContent = labels[key as keyof typeof labels];
        }
      });
    }

    private attachEventListeners(): void {
      const inputs = this.form.querySelectorAll('input, select, textarea');
      inputs.forEach((input) => {
        input.addEventListener('blur', (e) => {
          this.validateField(e.target as HTMLInputElement);
        });
      });

      this.form.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleSubmit();
      });
    }

    private setupCharacterCounter(): void {
      const textarea = document.getElementById('motivation') as HTMLTextAreaElement;
      const counter = document.getElementById('charCount');

      if (textarea && counter) {
        textarea.addEventListener('input', () => {
          counter.textContent = textarea.value.length.toString();
        });
      }
    }

    private validateField(field: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): boolean {
      const validation = this.content.form.validation;
      const errorEl = document.querySelector(`[data-error="${field.name}"]`) as HTMLElement;
      let errorMessage = '';

      field.classList.remove('partners-form__input--error', 'partners-form__select--error', 'partners-form__textarea--error');
      if (errorEl) {
        errorEl.classList.remove('partners-form__error--visible');
        errorEl.textContent = '';
      }

      if (field.hasAttribute('required') && !field.value.trim()) {
        errorMessage = validation.required;
      } else if (field.type === 'email' && field.value) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(field.value)) {
          errorMessage = validation.emailInvalid;
        }
      } else if (field.type === 'tel' && field.value) {
        const phoneRegex = /^[\d\s\+\-\(\)]+$/;
        if (!phoneRegex.test(field.value) || field.value.length < 9) {
          errorMessage = validation.phoneInvalid;
        }
      } else if (field.type === 'url' && field.value) {
        try {
          const url = new URL(field.value);
          if (!url.protocol.startsWith('http')) {
            errorMessage = validation.urlInvalid;
          }
        } catch {
          errorMessage = validation.urlInvalid;
        }
      } else if (field.name === 'address' && field.value && field.value.length < 10) {
        errorMessage = validation.addressMin;
      } else if (field.name === 'motivation' && field.value) {
        const length = field.value.length;
        if (length < 100) {
          errorMessage = validation.motivationMin;
        } else if (length > 500) {
          errorMessage = validation.motivationMax;
        }
      } else if (field.name === 'gdpr' && field.type === 'checkbox') {
        if (!(field as HTMLInputElement).checked) {
          errorMessage = validation.gdprRequired;
        }
      }

      if (errorMessage) {
        const errorClass = field.tagName === 'TEXTAREA' ? 'partners-form__textarea--error' :
          field.tagName === 'SELECT' ? 'partners-form__select--error' : 'partners-form__input--error';
        field.classList.add(errorClass);
        if (errorEl) {
          errorEl.textContent = errorMessage;
          errorEl.classList.add('partners-form__error--visible');
        }
        return false;
      }

      return true;
    }

    private validateForm(): boolean {
      const inputs = this.form.querySelectorAll('input, select, textarea');
      let isValid = true;

      inputs.forEach((input) => {
        if (!this.validateField(input as HTMLInputElement)) {
          isValid = false;
        }
      });

      return isValid;
    }

    private async handleSubmit(): Promise<void> {
      if (!this.validateForm()) {
        const firstError = this.form.querySelector('.partners-form__error--visible');
        if (firstError) {
          firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
        return;
      }

      this.submitBtn.disabled = true;
      this.submitBtn.classList.add('partners-form__submit--loading');

      const formData = new FormData(this.form);

      try {
        await this.submitToBackend(formData);
        this.showMessage('success');
        this.form.reset();
        document.getElementById('charCount')!.textContent = '0';
      } catch (error) {
        console.error('Form submission error:', error);
        this.showMessage('error');
      } finally {
        this.submitBtn.disabled = false;
        this.submitBtn.classList.remove('partners-form__submit--loading');
      }
    }

    private async submitToBackend(formData: FormData): Promise<void> {
      // Simulate API call (replace with real GraphQL mutation)
      return new Promise((resolve) => {
        setTimeout(() => {
          console.log('Partner form data:', Object.fromEntries(formData));
          resolve();
        }, 1500);
      });
    }

    private showMessage(type: 'success' | 'error'): void {
      const successMsg = document.getElementById('successMessage');
      const errorMsg = document.getElementById('errorMessage');

      this.form.style.display = 'none';

      if (type === 'success' && successMsg) {
        successMsg.classList.add('partners-form__message--visible');
        successMsg.scrollIntoView({ behavior: 'smooth', block: 'center' });
      } else if (type === 'error' && errorMsg) {
        errorMsg.classList.add('partners-form__message--visible');
        errorMsg.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new PartnerApplicationForm());
  } else {
    new PartnerApplicationForm();
  }
</script>
