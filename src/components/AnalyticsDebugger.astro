---
// Only show in development mode
const isDevelopment = import.meta.env.PUBLIC_ENV === 'development';
---

{isDevelopment && (
  <div id="analytics-debugger" class="fixed bottom-4 right-4 z-50">
    <button
      id="toggle-analytics-debug"
      class="bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg text-sm font-mono hover:bg-gray-700 transition-colors"
      type="button"
    >
      📊 Analytics Debug
    </button>

    <div
      id="analytics-debug-panel"
      class="hidden absolute bottom-full right-0 mb-2 w-96 max-h-96 overflow-auto bg-white rounded-lg shadow-xl border border-gray-200"
    >
      <div class="p-4">
        <h3 class="font-bold text-gray-800 mb-2 flex items-center justify-between">
          Analytics Events Log
          <button
            id="clear-analytics-log"
            class="text-xs bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600"
            type="button"
          >
            Clear
          </button>
        </h3>
        <div id="analytics-events-list" class="space-y-2 text-xs font-mono">
          <p class="text-gray-500">No events tracked yet...</p>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Analytics Debugger Script
    (function() {
      const debugButton = document.getElementById('toggle-analytics-debug');
      const debugPanel = document.getElementById('analytics-debug-panel');
      const eventsList = document.getElementById('analytics-events-list');
      const clearButton = document.getElementById('clear-analytics-log');

      let isOpen = false;
      let events: any[] = [];

      // Toggle panel visibility
      debugButton?.addEventListener('click', () => {
        isOpen = !isOpen;
        if (debugPanel) {
          debugPanel.classList.toggle('hidden');
        }
      });

      // Clear events log
      clearButton?.addEventListener('click', () => {
        events = [];
        if (eventsList) {
          eventsList.innerHTML = '<p class="text-gray-500">No events tracked yet...</p>';
        }
      });

      // Override dataLayer.push to capture events
      if (typeof window !== 'undefined') {
        const originalPush = window.dataLayer?.push || Array.prototype.push;

        window.dataLayer = window.dataLayer || [];
        window.dataLayer.push = function(...args: any[]) {
          // Call original push
          const result = originalPush.apply(window.dataLayer, args);

          // Log the event
          args.forEach(event => {
            if (typeof event === 'object' && event !== null) {
              events.unshift(event);
              updateEventsList();
            }
          });

          return result;
        };
      }

      function updateEventsList() {
        if (!eventsList) return;

        const maxEvents = 10;
        const displayEvents = events.slice(0, maxEvents);

        if (displayEvents.length === 0) {
          eventsList.innerHTML = '<p class="text-gray-500">No events tracked yet...</p>';
          return;
        }

        eventsList.innerHTML = displayEvents.map((event, index) => `
          <div class="bg-gray-50 p-2 rounded border border-gray-200">
            <div class="font-bold text-gray-700 mb-1">
              Event #${events.length - index}: ${event.event || 'Unknown'}
            </div>
            <pre class="text-xs text-gray-600 overflow-x-auto">${JSON.stringify(event, null, 2)}</pre>
          </div>
        `).join('');
      }

      // Check GTM status
      setTimeout(() => {
        const gtmStatus = window.google_tag_manager ? '✅ Loaded' : '❌ Not Loaded';
        const ga4Status = window.gtag ? '✅ Loaded' : '❌ Not Loaded';

        console.log('%c📊 Analytics Status', 'background: #4CAF50; color: white; padding: 4px 8px; border-radius: 4px; font-weight: bold;');
        console.log(`GTM: ${gtmStatus}`);
        console.log(`GA4: ${ga4Status}`);
        console.log('DataLayer:', window.dataLayer);
      }, 2000);
    })();
  </script>
)}